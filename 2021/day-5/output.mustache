<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Day 5</title>
    <style>
        /* #board {
            --tile-size: 50px;
            display: grid;
            grid-template-columns: repeat(var(--cols), var(--tile-size));
            grid-template-rows: repeat(var(--rows), var(--tile-size));
        } */
        body,
        html {
            margin: 0;
        }
    </style>
</head>
<body>
    <canvas id="board"></canvas>
    <script>
        //  y = y1 + ((x - x1) / (x2 - x1)) * (y2 - y1)
        const TILE_SIZE = 1;
        const map = JSON.parse("{{map}}".replace(/&quot;/g, '"'))
        const maxX = {{maxX}}
        const maxY = {{maxY}}
        const maxValue = {{maxValue}}
        
        const interpolate = (x) => ([x1, y1]) => ([x2, y2]) => y1 + ((x - x1) / (x2 - x1)) * (y2 - y1)
        const keyToPoint = (key) => {
            const [xs, ys] = key.split(',')
            return [Number(xs.replace('(', '')), Number(ys.replace(')', ''))]
        }
        const canvas = document.getElementById('board')
        const context = canvas.getContext('2d')
        
        canvas.width = maxX + TILE_SIZE
        canvas.height = maxY + TILE_SIZE

        context.fillStyle = "darkblue";
        context.fillRect(0, 0, canvas.width, canvas.height);

        const createTile = ([x, y], value) => {
            if(value) {
                const interpolateValue = interpolate(value)([1, 0])
                const [r, g, b] = [[maxValue, 197 - 30], [maxValue, 66 - 121], [maxValue, 69 - 44]].map(interpolateValue)
                context.fillStyle = `rgba(${30 + r}, ${121 + g}, ${44 + b}, 1)`
                context.fillRect(x - TILE_SIZE / 2, y - TILE_SIZE / 2, TILE_SIZE, TILE_SIZE);
            }
        }

        const showFrame = (frames) => {
            if(!frames.length) return

            const lookAt = frames.slice(0, 60)
            const rest = frames.slice(60)
            for(const frame of lookAt) {
                const [key, value] = frame
                const point = keyToPoint(key)
                createTile(point, value)
            }
            window.requestAnimationFrame(() => showFrame(rest))
        }

        showFrame(Object.entries(map))

    </script>
    
</body>
</html>