#!/usr/bin/env -S node --experimental-detect-module

import fs from "fs";
import path from "path";
import readline from "readline";
import { promisify } from "util";

const prompt = (() => {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    terminal: true,
  });
  return promisify(rl.question).bind(rl);
})();

const LOG_PREFIX = {
  log: "游꾼",
  error: "游눤",
  info: "游꾻",
};
const YEAR = 2023;
const AOC_URL = `https://adventofcode.com/${YEAR}`;
const TOKEN = await (async () => {
  let settingsPath = path.resolve(".token");
  if (fs.existsSync(settingsPath)) {
    return fs.readFileSync(settingsPath).toString("utf8");
  }

  const token = await prompt("游꾸 Please provide your AoC session token: ");
  fs.writeFileSync(".token", token);

  return token;
})();

const CARGO_TOML_FILE = `[package]
name = "aoc-${YEAR}-{day}"
version = "1.74.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]

[[bin]]
name = "aoc-${YEAR}-{day}"
path = "main.rs"
`;
const MODULE_FILE = `fn read_input() -> Vec<String> {
  std::io::stdin()
      .lines()
      .filter_map(|line| line.ok())
      .map(|line| line.trim().to_string())
      .collect()
}

fn part1() -> Option<u32> {
  None
}

fn part2() -> Option<u32> {
  None
}

fn main() {
  println!("{title}");
  if let Some(part) = std::env::args().skip(1).next() {
      if let Some(result) = match part.as_str() {
          "1" => part1(),
          "2" => part2(),
          _ => panic!("游눤 Invalid part number: {part}"),
      } {
          println!("游꾸 Result part {part}: {result}");
      }
  } else {
      if let Some(result_1) = part1() {
          println!("游꾸 Result part 1: {result_1}");
      }
      if let Some(result_2) = part2() {
          println!("游꾸 Result part 2: {result_2}");
      }
  }
}
`;
global.console = new Proxy(global.console, {
  get(target, method) {
    return new Proxy(target[method], {
      apply(target, thisArg, ...[message, ...rest]) {
        return Reflect.apply(target, thisArg, [
          `${LOG_PREFIX[method]} ${message}`,
          ...rest,
        ]);
      },
    });
  },
});

const [, , day] = process.argv;

async function generateDay(dayString) {
  const day = Number(dayString);
  if (isNaN(day) || day < 0 || day > 25) {
    throw new Error(`Day ${dayString} is not a valid day`);
  }

  const dayUrl = `${AOC_URL}/day/${day}`;

  const dayResult = await fetch(dayUrl, {
    headers: {
      Cookie: `session=${TOKEN}`,
      Accept: "text/html",
    },
  });
  if (!dayResult.ok) {
    throw new Error(
      `Unable to retrive day information [${dayResult.status}] "${dayResult.statusText}"`
    );
  }

  const dayHtml = await dayResult.text();
  const [,title] = (dayHtml.match(/\<h2\>(.*?)\<\/h2\>/) ?? []);
  if(!title) {
    throw new Error(`Unable to extract day title`)
  }
  console.log(title)

  const dayFolderPath = path.resolve("days", dayString);
  if (fs.existsSync(dayFolderPath)) {
    throw new Error(`Day ${day} already exists!`);
  }

  console.info(`Downloading day input`);
  const inputUrl = `${dayUrl}/input`;
  const inputResult = await fetch(inputUrl, {
    headers: {
      Cookie: `session=${TOKEN}`,
      Accept: "text/html",
    },
  });

  if (!inputResult.ok) {
    throw new Error(
      `Unable to download input [${inputResult.status}] "${inputResult.statusText}"`
    );
  }
  const input = await inputResult.text();

  console.info("Generating files");
  const moduleFile = MODULE_FILE.replace(/\{day\}/g, day).replace(/\{title\}/g, title);
  const cargoTomlFile = CARGO_TOML_FILE.replace(/\{day\}/g, day);

  console.info(`Generating day folder`);
  fs.mkdirSync(dayFolderPath, { recursive: true });

  console.info(`Saving files`);
  fs.writeFileSync(path.resolve(dayFolderPath, "main.rs"), moduleFile);
  fs.writeFileSync(path.resolve(dayFolderPath, "Cargo.toml"), cargoTomlFile);
  fs.writeFileSync(path.resolve(dayFolderPath, "input.txt"), input);
  fs.writeFileSync(path.resolve(dayFolderPath, "test.txt"), "");

  console.log(`Finished creating day ${day}!`);
  console.log(`code ./${path.relative(process.cwd(), dayFolderPath)}`);
}

console.log(`--- AoC ${YEAR} ---`)
try {
  await generateDay(day);
  process.exit(0);
} catch (error) {
  console.error(error.message);
  process.exit(-1);
}
